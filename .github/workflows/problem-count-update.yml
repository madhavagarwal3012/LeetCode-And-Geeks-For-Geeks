name: Update Problem Count
on:
  push:
    branches: [ main ]
permissions:
  contents: write
# Add concurrency control to prevent overlapping runs
concurrency:
  group: update-problem-count
  cancel-in-progress: true
jobs:
  update-count:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}
      
      - name: Count problems and update README
        run: |
          # Print directory structure for debugging
          echo "Directory structure:"
          find . -type d -not -path "*/\.*" -maxdepth 2 | sort
          
          # Count all top-level subdirectories (excluding system dirs and difficulty directories)
          all_directories=$(find . -mindepth 1 -maxdepth 1 -type d \
            -not -path "*/\.*" \
            -not -path "./.*" \
            -not -path "./__pycache__" \
            | wc -l | tr -d ' ')
          
          echo "All problem directories: $all_directories"
          
          # Count GFG problems (contains GFG in name)
          gfg_count=$(find . -mindepth 1 -maxdepth 1 -type d \
            -not -path "*/\.*" \
            -not -path "./.*" \
            -not -path "./__pycache__" \
            -name "*GFG*" | wc -l | tr -d ' ')
          
          echo "GFG problem directories: $gfg_count"
          
          # Count difficulty directories
          difficulty_dirs=0
          difficulty_problems=0
          
          # Check all difficulty directories
          for difficulty in "School" "Basic" "Easy" "Medium" "Hard"; do
            dir_path="Difficulty: $difficulty"
            if [ -d "$dir_path" ]; then
              difficulty_dirs=$((difficulty_dirs + 1))
              problems_count=$(find "$dir_path" -mindepth 1 -maxdepth 1 -type d | wc -l | tr -d ' ')
              difficulty_problems=$((difficulty_problems + problems_count))
              echo "$dir_path contains $problems_count problems"
            fi
          done
          
          echo "Total difficulty directories: $difficulty_dirs"
          echo "Total problems in difficulty directories: $difficulty_problems"
          
          # Calculate total GFG problems (GFG-tagged + difficulty problems)
          total_gfg=$((gfg_count + difficulty_problems))
          echo "Total GFG problems: $total_gfg"
          
          # Calculate LeetCode problems (all problems minus GFG problems)
          regular_count_non_gfg=$(find . -mindepth 1 -maxdepth 1 -type d \
            -not -path "*/\.*" \
            -not -path "./.*" \
            -not -path "./__pycache__" \
            -not -path "./Difficulty: School" \
            -not -path "./Difficulty: Basic" \
            -not -path "./Difficulty: Easy" \
            -not -path "./Difficulty: Medium" \
            -not -path "./Difficulty: Hard" \
            -not -name "*GFG*" | wc -l | tr -d ' ')
          
          leetcode_count=$regular_count_non_gfg
          echo "Total LeetCode problems: $leetcode_count"
          
          # Calculate final total count
          final_total=$((total_gfg + leetcode_count))
          echo "Final total count: $final_total"
          
          # Get current date and time in Indian Standard Time with UTC+5:30 notation
          current_datetime=$(TZ=Asia/Kolkata date "+%B %d, %Y at %I:%M %p (UTC+5:30)")
          
          # Update the README with the counts
          if grep -q "No. Of Problems In This Repository:" README.md; then
            # Update total problems count with bold formatting
            if grep -q "**No\\. Of Solutions In This Repository:" README.md; then
              # Already in bold format
              sed -i "s/**No\\. Of Solutions In This Repository: [0-9]*/**No. Of Solutions In This Repository: $final_total/" README.md
            elif grep -q "**No\\. Of Problems In This Repository:" README.md; then
              # Update from Problems to Solutions
              sed -i "s/**No\\. Of Problems In This Repository: [0-9]*/**No. Of Solutions In This Repository: $final_total/" README.md
            elif grep -q "No\\. Of Problems In This Repository:" README.md; then
              # Convert from Problems to Solutions with bold format
              sed -i "s/No\\. Of Problems In This Repository: [0-9]*/**No. Of Solutions In This Repository: $final_total**/" README.md
            else
              # Create new with Solutions
              sed -i "/If you find my solutions useful, consider star this repository (●'◡'●)/a\\\\n\\n**No. Of Solutions In This Repository: $final_total**" README.md
            fi
            
            # Check if GFG and LeetCode counts already exist and update them
            if (grep -q "GFG Problems:" README.md || grep -q "GFG Solutions:" README.md) && (grep -q "LeetCode Problems:" README.md || grep -q "LeetCode Solutions:" README.md); then
              # Check if already in bold format with Solutions
              if grep -q "\\*\\*LeetCode Solutions:" README.md; then
                sed -i "s/\\*\\*LeetCode Solutions: [0-9]*\\*\\*/**LeetCode Solutions: $leetcode_count**/" README.md
                sed -i "s/\\*\\*GFG Solutions: [0-9]*\\*\\*/**GFG Solutions: $total_gfg**/" README.md
              # Check if in bold format with Problems
              elif grep -q "\\*\\*LeetCode Problems:" README.md; then
                sed -i "s/\\*\\*LeetCode Problems: [0-9]*\\*\\*/**LeetCode Solutions: $leetcode_count**/" README.md
                sed -i "s/\\*\\*GFG Problems: [0-9]*\\*\\*/**GFG Solutions: $total_gfg**/" README.md
              # Check if not in bold format with Problems
              elif grep -q "LeetCode Problems:" README.md; then
                sed -i "s/LeetCode Problems: [0-9]*/**LeetCode Solutions: $leetcode_count**/" README.md
                sed -i "s/GFG Problems: [0-9]*/**GFG Solutions: $total_gfg**/" README.md
              else
                # Handle any other format with Solutions
                sed -i "s/LeetCode Solutions: [0-9]*/**LeetCode Solutions: $leetcode_count**/" README.md
                sed -i "s/GFG Solutions: [0-9]*/**GFG Solutions: $total_gfg**/" README.md
              fi
            else
              # Add LeetCode and GFG counts after total problems count (LeetCode first)
              sed -i "/No\\. Of Solutions In This Repository:/a\\- **LeetCode Solutions: $leetcode_count**\\n- **GFG Solutions: $total_gfg**" README.md
            fi
            fi
            
            # Remove any existing Last Updated line
            sed -i "/Last Updated:/d" README.md
            
            # Add new Last Updated line
            if grep -q "GFG Solutions:" README.md; then
                sed -i "/GFG Solutions:/a\\\\nLast Updated: $current_datetime" README.md
            else
                sed -i "/GFG Problems:/a\\\\nLast Updated: $current_datetime" README.md
            fi
          else
            # Add all information as new content if none exists
            if ! grep -q "No\\. Of Solutions In This Repository:" README.md && ! grep -q "No\\. Of Problems In This Repository:" README.md; then
              sed -i "/If you find my solutions useful, consider star this repository (●'◡'●)/a\\\\n\\n**No. Of Solutions In This Repository: $final_total**\\n- **LeetCode Solutions: $leetcode_count**\\n- **GFG Solutions: $total_gfg**\\n\\nLast Updated: $current_datetime" README.md
            fi
          fi
      
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --staged --quiet || (git commit -m "Update solution count: Total=$final_total, LeetCode=$leetcode_count, GFG=$total_gfg [skip ci]" && git pull --rebase origin main && git push)
